import React, { Component } from 'react';
import { connect } from 'react-redux';
import { selectBook } from '../actions/index';
//make sure action generated by action creator ends up flowing through the different reducers
import { bindActionCreators } from 'redux';

class BookList extends Component {
  
  renderList(){
    return this.props.books.map((book) => {
      return(
        //add an click event handler to the li to call the action creator on the particular book that was clicked on
        <li 
          key={book.title}
          onClick = {() => this.props.selectBook(book)}
          className="list-group-item">
          {book.title}
        </li>
      );
    });
  }
  
  // call a seperate function in jsx, use curly braces to access js variable
  render(){
    return(
      <ul className="list-group col-sm-4">
        {this.renderList()}
      </ul>
    )
  }
}
//container is a component that has direct access to the state produced by redux
// want the most parent component that cares about a piece of state to be a container
//only create containers for components that care about state (like class based components vs functional?)

//This function is glue b/w react and redux
//take application state as an argument and what it returns will be props for bookList
function mapStateToProps(state){
  return {
    books: state.books
  };
}
//if state ever changes this container will instantly rerender with the new list of books, and the container (bookList) will also rerender
//whenever application state changes, the object in the state function will be assigned as props to the component (leading to the rerendering?)

//Anything returned from this function will end up as props on the bookList container (then we can use this.props.selectBook to call our action creator)
function mapDispatchToProps(dispatch){
  //whenever selectBook is called the result should be passed to all of our reducers (thats what bindActionCreators is doing here with dispatch)
  //whenever selectBook gets called make sure result flows through dispatch function - dispatch fn takes all the actions and spits them back out to the reducers in the application
  return bindActionCreators({ selectBook: selectBook}, dispatch)
}

//connect function (imported from react-redux)
//connect takes a function (mapStateToProps) and a component (BookList) and produces a container (a component that is aware of the state contained by redux)
//we want to export this container that we've created
//promote bookList from a component to a container-needs to know about dispatch method, selectBook, make it available as a prop
//********************look at documentation on connect.*************************************************
export default connect(mapStateToProps, mapDispatchToProps)(BookList);



